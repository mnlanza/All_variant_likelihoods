"shiny",        # For web dashboards
"plotly",       # Interactive plots
"ggpubr"        # Publication-ready plots
))
cat("\014")
5+6
a<-5
print(a)
sum(a,b)
a <-5
sum(a,b)
sum(a,b)
source("~/.active-rstudio-document")
sum(a,b)
sum(a,b)
name <- c("Greg", "Gill")
name
name <- c("Greg", "Gill")
name
name <- c("Greg", "Gill")
name
name <- c("Greg", "Gill")
name
source("~/.active-rstudio-document")
5+6
a <- 5
b <- 4
print(a)
sum(a,b)
name <- c("Greg", "Gill")
name
5+6
a <- 5
b <- 4
print(a)
sum(a,b)
name <- c("Greg", "Gill")
name
friends <- data.frame(name, age, gender)
name <- c("Greg", "Gill")
age <- c(47, 52, 35)
gender <- c("M", "F", "F")
friends <- data.frame(name, age, gender)
name <- c("Greg", "Paul", "Kim")
friends <- data.frame(name, age, gender)
View(friends)
View(friends)
gender <- c("M", "M", "F")
friends <- data.frame(name, age, gender)
View(friends)
friends$name
friends[1,"Greg"]
friends[friends$age<50, 1:2]
install.packages("tidyverse")
library(tidyverse)
friends %>%
select(name,age) %>%
filter(age < 50) %>%
arrange (age)
install.packages("dslabs")
require("dslabs")
require("dslabs")
require("dslabs")
require("ggplot2")
(require("dslabs"))
(require("ggplot2"))
installed.packages()
sum(installed.packages()[, "LibPath"] |> unique() |> sapply(function(p) sum(file.info(list.files(p, recursive = TRUE, full.names = TRUE))$size))) / (1024^2)
library("tidyverse")
library("dslabs")
data(movielens)
source("~/Desktop/Relman_lab/edxDataAnalysiscourse/testing.r", echo = TRUE)
log2(8)
log(8, base = 2)
log(8,2)
data()
murders
murders$populations
murders$population
sort(murders$total)
sort(murders$state)
num_murders_ordered <- order(murders$total)
murders$state[num_murders_ordered]
num_murders_ordered
murders$state[which.max(murders$population)]
a <- 2
b <- -1
c <- -4
-b + sqrt(b^2-4ac)/(2a)
(-b + sqrt(b^2-4*a*c))/(2*a)
(-b - sqrt(b^2-4*a*c))/(2*a)
log4(1024)
log2(1024)
log(1024,4)
murders %>%
ggplot(aes(population, total, label=abb, color=region)) +
geom_label()
data(movielens)
movielens
length(movielens)
nrow(movielens)
type(movielens$title)
class(movielens$title)
class(movielens$genres)
levels(movielens$genres)
nlevels(movielens$genres)
hours <- time/60
class(time)
hours <- as.numeric(time)/60
time <- c(10, 30, 40, 50)
time <- as.numeric(time)
hours <- time/60
mph <- distance/hours
distance <- c(0.8, 3.1, 2.8, 4.0)
time <- c(10, 30, 40, 50)
time <- as.numeric(time)
hours <- time/60
mph <- distance/hours
mph["mandy"]
mph[which("Mandi")]
mph[which(name == "Mandi")]
name <- c("Mandi", "Amy", "Nicole", "Olivia")
distance <- c(0.8, 3.1, 2.8, 4.0)
time <- c(10, 30, 40, 50)
time <- as.numeric(time)
hours <- time/60
mph <- distance/hours
mph[which(name == "Mandi")]
name[which.max(mph)]
time[which(name == olivia)]
time[which(name == Olivia)]
time[which(name == Olivia)]
time[which(name == "Olivia")]
hours[which(name == "Olivia")]
data(olive)
head(olive)
plot(olive$palmitic, olive$palmitoleic)
hist(olive$eicosenoic)
library(ggplot2)
boxplot(olive$region ~ olive$palmitic)
boxplot(olive$palmitic ~ olive$region)
# installing and loading the dplyr package
install.packages("dplyr")
library(dplyr)
# adding a column with mutate
library(dslabs)
data("murders")
murders
install.packages("dplyr")
murders <- mutate(murders, rate = total / population * 100000)
murders
# initializing
library(Biostrings)
library(ggplot2)
setwd("~/Desktop/Relman_lab/EVO2_Exercise")
source("handle_EVO2_output.r")
# makes a color coded object with (set of strings)
all_variants <- readDNAStringSet("raw_data/gene_variants.fasta")
# initializes df with EVO2 probabilities for each base and associated entropy and log-likelihood
initialize_df <- function(EVO2_npy_file, sequence_name) {
# Load and normalize logits into nucleotide probabilities
prob_matrix <- get_logits(EVO2_npy_file)
# calculates entropy and adds it as a column to the df
prob_matrix$entropy <- apply(prob_matrix[,1:4], 1,
function(position_prob) -sum(position_prob * log2(position_prob)))
# makes plain text vector of names and gene seq and then pulls out desired gene seq
seqs <- as.character(all_variants)
desired_seq <- seqs[sequence_name]
# turns the sequence into a list of single nucleotides
seq_vec <- strsplit(desired_seq, split = "")[[1]]
# initializes a vector with as many 0's as length of the seq
log_likelihood <- numeric(length(seq_vec))
# iterates through the positions to get log-likelihood
for (i in 1:length(seq_vec)) {
base <- seq_vec[i]
base_index <- match(base, c("A", "C", "G", "T")) # match actual nuc to prob of EVO2 predict nuc
# stores calced log likelihood in a vector using log-likelihood formula
log_likelihood[i] <- log2(prob_matrix[i, base_index])
}
# adds the log likelihood column to prob matrix df
prob_matrix$log_likelihood <- log_likelihood
return(prob_matrix)
}
# creates data frame with calculated entropy and log likelihood for S1 & other variants
df_S1 <- initialize_df("raw_data/input_83_S1_logits.npy", "83_S1")
df_L <- initialize_df("raw_data/input_83_L_logits.npy", "83_L")
df_S2 <- initialize_df("raw_data/input_83_S2_logits.npy", "83_S2")
df_Stop <- initialize_df("raw_data/input_83_Stop_logits.npy", "83_Stop")
# Helper to build the common plotting data frame
build_plot_df <- function(gene_df, metric, index_rows = 200:300, highlighted = 247:249) {
# metric should be the name of a column in gene_df, e.g. "entropy" or "log_likelihood"
df <- data.frame(
pos     = index_rows,
value   = gene_df[[metric]][index_rows],
is_high = index_rows %in% highlighted,
codon_i = ((index_rows - 1) %% 3) + 1
)
df
}
# plots entropy with positions colored and larger dot size for codon of interest
plot_entropy <- function(gene_name, gene_df, index_rows  = 200:300, highlighted = 247:249) {
# uses helper function to built df for plotting
plot_df <- build_plot_df(gene_df, "entropy", index_rows, highlighted)
ggplot(plot_df, aes(x = pos, y = value)) +
# color by codon position:
geom_point(aes(color = factor(codon_i),   # 1,2,3 pos each diff color
size   = is_high),           # bigger if highlighted
show.legend = c(color = TRUE, size = TRUE)) +
# pick colors for 1st/2nd/3rd positions:
scale_color_manual(name   = "Codon position",
values = c("1" = "red", "2" = "orange", "3" = "green")) +
# size legend: FALSE→small circle, TRUE→bigger circle
scale_size_manual(name   = "Key positions",
values = c(`FALSE` = 1.5, `TRUE`  = 2.7)) +
labs(x = "Nucleotide position", y = "Entropy",
title = sprintf("Entropy across positions %d-%d (%s)",
min(index_rows), max(index_rows), gene_name)) +
theme_minimal() + theme(legend.position = "right", legend.box = "vertical")
}
# Plotting Entropy for diff e-coli gene variants
plot_entropy("83_S1", df_S1)
plot_entropy("83_S2", df_S2)
plot_entropy("83_L",  df_L)
plot_entropy("83_Stop", df_Stop)
plot_log_likelihood <- function(gene_name, gene_df, index_rows  = 200:300, highlighted = 247:249) {
# uses helper function to built df for plotting
plot_df <- build_plot_df(gene_df, "log_likelihood", index_rows, highlighted)
ggplot(plot_df, aes(x = pos, y = -value)) +
geom_point(aes(colour = factor(codon_i), size = is_high),
show.legend = c(colour = TRUE, size = TRUE)) +
# Color scale for codon positions 1/2/3
scale_colour_manual(name   = "Codon position",
values = c("1" = "red", "2" = "orange", "3" = "green")) +
# Size scale for highlighted points
scale_size_manual(name   = "Key positions",
values = c(`FALSE` = 1.5, `TRUE` = 2.7)) +
# Labels and theme
labs(x = "Nucleotide position", y = "Log-likelihood",
title = sprintf("-log-likelihood across positions %d-%d (%s)",
min(index_rows), max(index_rows), gene_name)) +
theme_minimal() + theme(legend.position = "right", legend.box = "vertical")
}
plot_log_likelihood("83_S1", df_S1)
plot_log_likelihood("83_S2", df_S2)
plot_log_likelihood("83_L", df_L)
plot_log_likelihood("83_Stop", df_Stop)
# Calculating percentage of positions that most likely nucleotide (EVO2) was observed nucleotide (S1)
probability_correct_base <- function(gene, df_gene){ # input is a gene string such as "83_S1" and corresponding df
correct_count <- 0
# gets gene sequence and splits it into a list of all of the nucleotides
split_seq <- strsplit(as.character(all_variants[gene]), "")[[1]]
for (i in 1:length(split_seq)){
# gets nucleotide column with highest probability
max_column <- which.max(df_gene[i, 1:4])
# gets nucleotide from column
predicted_base <- c("A", "C", "G", "T")[max_column]
# counts accurately predicted nucleotides
if (predicted_base == split_seq[i]){
correct_count <- correct_count + 1
}
}
answer <- correct_count/length(split_seq)
return(paste("The probability that EVO2 predicts the correct base across the gyrase gene in e-coli for", gene, "is",
round(answer, 4)))
}
probability_correct_base("83_S1", df_S1)
probability_correct_base("83_S2", df_S2)
probability_correct_base("83_Stop", df_Stop)
probability_correct_base("83_L", df_L)
# Now plotting per-basepair differences in log likelihood and entropy vs 83_S1
entropy_diff_L <- df_L$entropy - df_S1$entropy
loglike_diff_L <- df_L$log_likelihood - df_S1$log_likelihood
entropy_diff_S2 <- df_S2$entropy - df_S1$entropy
loglike_diff_S2 <- df_S2$log_likelihood - df_S1$log_likelihood
entropy_diff_Stop <- df_Stop$entropy - df_S1$entropy
loglike_diff_Stop <- df_Stop$log_likelihood - df_S1$log_likelihood
plot_metric_diff <- function(ref_gene, target_gene, ref_df, target_df, metric = "entropy", index_rows  = 200:300,
highlight   = 247:249) {
# gets diff vector
diff_vec <- target_df[[metric]] - ref_df[[metric]]
# small data-frame for plotting
df <- data.frame(pos = index_rows, diff_vec    = diff_vec[index_rows],
codon_i  = ((index_rows - 1) %% 3) + 1, is_high  = index_rows %in% highlight)
ggplot(df, aes(x = pos, y = diff_vec)) +
geom_point(aes(colour = factor(codon_i), size = is_high), show.legend = c(colour = TRUE, size = TRUE)) +
scale_color_manual("Codon position", values = c("1" = "red", "2" = "orange", "3" = "green")) +
scale_size_manual("Key positions", values = c(`FALSE` = 1.5, `TRUE` = 2.7)) +
labs(x = "Nucleotide position", y = sprintf("Δ %s", gsub("_", " ", metric, fixed = TRUE)),
title = sprintf("%s difference: %s vs %s", gsub("_", " ", metric, fixed = TRUE), target_gene, ref_gene)) +
theme_minimal() + theme(legend.position = "right", legend.box = "vertical") }
# plotting entropy differences
plot_metric_diff("83_S1", "83_L",    df_S1, df_L,    metric = "entropy")
plot_metric_diff("83_S1", "83_S2",   df_S1, df_S2,    metric = "entropy")
plot_metric_diff("83_S1", "83_Stop", df_S1, df_Stop, metric = "entropy")
# plotting log-likelihood differences
plot_metric_diff("83_S1", "83_L",    df_S1, df_L,    metric = "log_likelihood")
plot_metric_diff("83_S1", "83_S2",   df_S1, df_S2,   metric = "log_likelihood")
plot_metric_diff("83_S1", "83_Stop", df_S1, df_Stop, metric = "log_likelihood")
# Making 4x4 matrix of log-likelihood sums
total_ll <- c( #storing the sums in a vector
"83_S1" = sum(df_S1$log_likelihood),
"83_S2" = sum(df_S2$log_likelihood),
"83_L"  = sum(df_L$log_likelihood),
"83_Stop" = sum(df_Stop$log_likelihood)
)
diff_matrix <- outer(total_ll, total_ll, "-") # making a 4x4 matrix
df_plot <- as.data.frame(as.table(diff_matrix))   # rows: Var1, Var2, Freq
ggplot(df_plot, aes(Var1, Var2, fill = Freq)) + # Creates heatmap of log likelihood diff
geom_tile() +
geom_text(aes(label = sprintf("%.2f", Freq))) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 0, name = "Δ log-L") +
labs(title = "Log-Likelihood Differences Between Variants",
x = "", y = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Helper function to save as pots as pdf
save_as_pdf_12x5 <- function(plot_obj, filename, out_dir = "My_figures") {
if (!dir.exists(out_dir)) dir.create(out_dir, recursive = TRUE)
full_path <- file.path(out_dir, filename)
ggsave(full_path,
plot   = plot_obj,
device = cairo_pdf,
width  = 11,
height = 5,
units  = "in")
message("Saved: ", full_path)
}
save_as_pdf_12x5(plot_metric_diff("83_S1", "83_L", df_S1, df_L), "L-S1_entropy.pdf")
source("~/Desktop/Relman_lab/EVO2_Exercise/main.R", echo = TRUE)
heatmap_plot <- ggplot(df_plot, aes(Var1, Var2, fill = Freq)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", Freq))) +
scale_fill_gradient2(
low = "blue",
mid = "white",
high = "red",
midpoint = 0,
name = "Δ log-L"
) +
labs(
title = "Log-Likelihood Differences Between Variants",
x = "",
y = ""
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
heatmap_plot <- ggplot(df_plot, aes(Var1, Var2, fill = Freq)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", Freq))) +
scale_fill_gradient2(
low = "blue",
mid = "white",
high = "red",
midpoint = 0,
name = "Δ log-L"
) +
labs(
title = "Log-Likelihood Differences Between Variants",
x = "",
y = ""
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
heatmap_plot
getwd()
source("~/Desktop/Relman_lab/EVO2_Exercise/Ex1_main.R", echo = TRUE)
plot_metric_diff
getwd()
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
# Source external functions first
source("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")  # Contains save_as_pdf
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")    # Contains initialize_df
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
getwd()
setwd("~/Desktop/Relman_lab/EVO2_Exercise")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
# plotting amino acid likelihoods
quartz()
print(plot_aa_ls())
print(plot_aa_ls())
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
# plotting amino acid likelihoods
#quartz()
print(plot_aa_ls())
# plotting normalized log-likelihoods
#quartz()
#print(plot_norm_ll())
plot_norm_ll()
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.R", echo = TRUE)
# plotting normalized log-likelihoods
#quartz()
#print(plot_norm_ll())
p <- plot_norm_ll()
p
p
# plotting normalized log-likelihoods
#quartz()
#print(plot_norm_ll())
plot_norm_ll()
()
()
plot_aa_ls <- function(){
df_norm_aa <- data.frame(
amino_acids = names(aa_rel_ls),
aa_rel_ls = aa_rel_ls
)
ggplot(df_norm_aa, aes(x = aa_rel_ls, y = amino_acids)) +
geom_col(fill = "steelblue") +
theme_minimal(base_size = 14) +
labs(x = "Relative amino acid likelihood", y = "Amino acids",
title = "Normalized (relative) amino acids per gene")
}
# plotting amino acid likelihoods
#quartz()
#print(plot_aa_ls())
plot_aa_ls()
file.exists("/Users/marcolanza/Desktop/Relman_lab/All_variant_likelihoods/evo2_variant_functions.R")
getwd()
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
file.exists("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
file.exists("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
file.exists("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
file.exists("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
file.exists("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
file.exists("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")
# === Load External Functions ===
file.exists("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
file.exists("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
file.exists("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")
# === Load External Functions ===
file.exists("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
file.exists("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
file.exists("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")
# === Load External Functions ===
#file.exists("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
#source("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
file.exists("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
file.exists("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")
# === Load Data and Compute Likelihoods ===
codon_table_11 <- getGeneticCode("11")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")
# ---- source helper scripts (absolute paths you know are correct) ----
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")  # <-- now safe, because it sources its own helper
# ---- source helper scripts (absolute paths you know are correct) ----
source("~/Desktop/Relman_lab/All_variant_likelihoods/handle_EVO2_output.r")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")  # <-- now safe, because it sources its own helper
# ---- source helper scripts (absolute paths you know are correct) ----
source("~/Desktop/Relman_lab/All_variant_likelihoods/handle_EVO2_output.r")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")  # <-- now safe, because it sources its own helper
# ---- source helper scripts (absolute paths you know are correct) ----
source("~/Desktop/Relman_lab/All_variant_likelihoods/handle_EVO2_output.r")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")  # <-- now safe, because it sources its own helper
file.exists("~/Desktop/Relman_lab/All_variant_likelihoods/handle_EVO2_output.r")
file.exists("~/Desktop/Relman_lab/All_variant_likelihoods/handle_EVO2_output.r")
file.exists("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
# ---- source helper scripts (absolute paths you know are correct) ----
source("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")  # <-- now safe, because it sources its own helper
# ---- source helper scripts (absolute paths you know are correct) ----
source("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")  # <-- now safe, because it sources its own helper
# ---- source helper scripts (absolute paths you know are correct) ----
source("~/Desktop/Relman_lab/EVO2_Exercise/handle_EVO2_output.r")
source("~/Desktop/Relman_lab/All_variant_likelihoods/gyrae_83_all.r")
source("~/Desktop/Relman_lab/EVO2_Exercise/evo2_analysis_functions.R")  # <-- now safe, because it sources its own helper
grep_result <- system("grep -R \".getBioC_online_sigrepo\" ~/Desktop/Relman_lab -n", intern = TRUE)
cat(grep_result, sep = "\n")
OptionParser         # should print   function(...)  (from namespace optparse)
packageVersion("optparse")
getAnywhere(OptionParser)[1]
# ---- source helper scripts ----
getwd()
source("~/Downloads/analyze_codon_vars.R")
